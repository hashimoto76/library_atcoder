{
	"intinput": {
		"prefix": "inti",
		"body": [
			"int(input())"
		],
		"description": "intinputする"
	},
	"mapinput": {
		"prefix": "mai",
		"body": [
			"map(int, input().split())"
		],
		"description": "mapinputする"
	},
	"listinput": {
		"prefix": "lisi",
		"body": [
			"list(map(int, input().split()))"
		],
		"description": "listinputする"
	},
	"input": {
		"prefix": "input",
		"body": [
			"input()"
		],
		"description": "inputする"
	},
	"ma": {
		"prefix": "omazinai",
		"body": [
			"import os",
			"import io",
			"input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline"
		],
		"description": "おまじない"
	},
	"lim": {
		"prefix": "lim",
		"body": "sys.setrecursionlimit(10000000)\r\nif 'pypyjit' in sys.builtin_module_names:\r\n    import pypyjit\r\n    pypyjit.set_param('max_unroll_recursion=-1')",
		"description": "上限解放"
	},
	"ki": {
		"prefix": "ki",
		"body": "import sys\r\nsys.setrecursionlimit(1000000000)\r\ninput = sys.stdin.readline\r\nfrom array import array\r\n\r\nn = int(input())\r\nes = [array(\"i\") for _ in range(n)]\r\nfor i in range(n - 1):\r\n    start, end = map(int, input().split())\r\n    start -= 1; end -= 1\r\n    es[start].append(end)\r\n    es[end].append(start)\r\n",
		"description": "木"
	},
	"heapq": {
		"prefix": "heapq",
		"body": [
			"from heapq import heappush, heapify, heappop"
		],
		"description": "優先度付きキュー"
	},
	"Counter": {
		"prefix": "counter",
		"body": [
			"from collections import Counter"
		],
		"description": "Counter"
	},
	"itertools": {
		"prefix": "itertools",
		"body": [
			"from itertools import permutations, combinations"
		],
		"description": "順列, 組合せを生成"
	},
	"bisect": {
		"prefix": "bisect",
		"body": "from bisect import bisect_left, bisect_right\r\n# bisect_left(a, x): a[i] >= xとなるような最小のi.\r\n# 昇順ソートされたリストaに昇順を崩さずxを挿入できる位置s(0-index)を返す.\r\n# a = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\r\n# s = bisect_left(a,4), s = 2\r\n\r\n",
		"description": "bisect"
	},
	"deque": {
		"prefix": "deque",
		"body": [
			"from collections import deque "
		],
		"description": "deque"
	},
	"key": {
		"prefix": "key",
		"body": [
			"key=lambda x:x[${1:}]"
		],
		"description": "ソートのkeyを指定"
	},
	"math": {
		"prefix": "math",
		"body": [
			"from math import comb, factorial, gcd, isqrt, perm, exp, log, log2, log10, sqrt, pi, acos, asin, atan ,atan2, cos, sin, tan",
			"from functools import reduce",
			"def gcd_list(numbers):",
			"   return reduce(gcd, numbers)",
			"def lcm(x, y):",
			"   return (x * y) // gcd(x, y)",
			"def lcm_list(numbers):",
			"   return reduce(lcm, numbers, 1)"
		],
		"description": "math いっぱい ver3.8以降"
	},
	"numpy": {
		"prefix": "numpy",
		"body": [
			"import numpy as np"
		],
		"description": "numpy"
	},
	"shousuu": {
		"prefix": "shousuu",
		"body": [
			"print('{:.15f}'.format(${1:})) # 小数第15桁まで表示"
		],
		"description": "小数第15桁まで表示"
	},
	"lru_cache": {
		"prefix": "lru_cache",
		"body": [
			"from functools import lru_cache",
			"@lru_cache(None)"
		],
		"description": "メモ化再帰"
	},
	"defaultdict": {
		"prefix": "defaultdict",
		"body": [
			"from collections import defaultdict",
			"# d = defaultdict(int)で0で初期化",
			"# d = defaultdict(lambda: 100)で100で初期化"
		],
		"description": "辞書"
	},
	"decimal": {
		"prefix": "decimal",
		"body": [
			"from decimal import Decimal,getcontext",
			"getcontext().prec = 100 # 標準は28,精度を調節"
		],
		"description": "decimal"
	},
	"matplotlib": {
		"prefix": "matplotlib",
		"body": [
			"import matplotlib.pylab as plt"
		],
		"description": "matplotlib"
	},
	"random": {
		"prefix": "random",
		"body": "from random import randrange as rd ",
		"description": "random"
	},
	"numba": {
		"prefix": "numba",
		"body": [
			"from numba import jit, i8, void, b1, u1, f8",
			"# i8:int, void:void, b1:bool, u1:string, f8:float, i8[:]:int配列, f8[:,:]:float二次元配列",
			"@jit(${1:}(${2:}))"
		],
		"description": "numba"
	},
	"marathon": {
		"prefix": "marathon",
		"body": [
			"import sys",
			"from random import randint",
			"from time import time",
			"start = time()",
			"sys.setrecursionlimit(10000000)",
			"input = sys.stdin.readline",
			"def eval_score():",
			"",
			"    return ",
			""
		],
		"description": "marathon"
	},
	"main": {
		"prefix": "main",
		"body": [
			"if __name__ == '__main__':"
		],
		"description": "main"
	},
	"mathpypy": {
		"prefix": "mathpypy",
		"body": [
			"from math import factorial, gcd, exp, log, log2, log10, sqrt, pi, acos, asin, atan ,atan2, cos, sin, tan",
			"from functools import reduce",
			"def gcd_list(numbers):",
			"   return reduce(gcd, numbers)",
			"def lcm(x, y):",
			"   return (x * y) // gcd(x, y)",
			"def lcm_list(numbers):",
			"   return reduce(lcm, numbers, 1)"
		],
		"description": "mathpypy"
	},
	"time": {
		"prefix": "time",
		"body": [
			"from time import time",
			"start = time()"
		],
		"description": "time"
	},
	"True": {
		"prefix": "ture",
		"body": "True",
		"description": "True"
	},
	"False": {
		"prefix": "false",
		"body": "False",
		"description": "False"
	},
	"deepcopy": {
		"prefix": "deepcopy",
		"body": "from copy import copy, deepcopy",
		"description": "deepcopy"
	},
	"LIS": {
		"prefix": "LIS",
		"body": "# seqの単調増加列の長さ\r\n# パラメータ wider_sense:False=狭義(<), True:広義(<=)\r\n\r\ndef LIS(seq, wider_sense=False):\r\n    from bisect import bisect_left, bisect_right\r\n    f = bisect_right if wider_sense else bisect_left\r\n    N = len(seq)\r\n    INF = 1000000000000000000\r\n    dp = [INF] * (N+1)\r\n    for x in seq:\r\n        dp[f(dp, x)] = x\r\n    return f(dp, INF - 1)",
		"description": "最長共通部分列"
	},
	"組み合わせ": {
		"prefix": "combination",
		"body": "#テーブル作るやつ 前処理:O(n*log(mod)), comb(n, k):O(1)\r\n\r\nmod = 10**9+7 #998244353 # 変える\r\ndef table():\r\n    k = 2 * 10 ** 5 + 5  # 変える\r\n    fac = [1] * k\r\n    finv = [1] * k\r\n    inv = [0] * k\r\n    inv[1] = 1\r\n    for i in range(2, k):\r\n        fac[i] = fac[i - 1] * i % mod\r\n        inv[i] = mod - inv[mod % i] * (mod // i) % mod\r\n        finv[i] = finv[i - 1] * inv[i] % mod\r\n    return fac, finv\r\nfac, finv = table()\r\ndef comb(n, k):\r\n    if n < k:\r\n        return 0\r\n    if n < 0 or k < 0:\r\n        return 0\r\n    return fac[n] * (finv[k] * finv[n - k] % mod) % mod",
		"description": "mod組み合わせ"
	},
	"入力高速化": {
		"prefix": "speedingup",
		"body": "import sys\r\ninput = sys.stdin.readline\r\n",
		"description": "入力高速化"
	},
	"chain": {
		"prefix": "chain",
		"body": "from itertools import chain\r\n# max(chain.from_iterable(dp)) # で二次元の最大値が取れるよ",
		"description": "chain"
	},
	"scanf": {
		"prefix": "scanf",
		"body": "from libc.stdio cimport scanf, printf",
		"description": "scanf, printf"
	},
	"speeding_up_string": {
		"prefix": "speedingupstr",
		"body": "import sys\r\ndef input(): return sys.stdin.readline().rstrip()  # 文字列\r\n",
		"description": "入力高速化"
	},
	"create_array": {
		"prefix": "array",
		"body": "def create_array(*dims, initial=0):\r\n    \"\"\"初期値initialでdim[0]*dim[1]*...*dim[n]の配列を生成\"\"\"\r\n    n = len(dims)\r\n    code = \"[\" * n + \"{}] * {}\" + \" for _ in range({})]\" * (n - 1)\r\n    return eval(code.format(initial, *reversed(dims)))\r\n\r\n\r\n",
		"description": "create array"
	},
	"print2d": {
		"prefix": "print2d",
		"body": "def print2D(matrix):\r\n    print(\"\\n\".join(\" \".join(map(str, v)) for v in matrix))\r\n\r\n",
		"description": "print2D"
	},
	"debug": {
		"prefix": "debugger",
		"body": "def debug(*a):\r\n    \"\"\"I am print debugger\"\"\"\r\n    def get_var_name(var):\r\n        for k, v in globals().items():\r\n            if id(v) == id(var):\r\n                name = k\r\n        return name\r\n    print(\"-\" * 50)\r\n    if isinstance(a[0], list) and isinstance(a[0][0], list):\r\n        b = a[0]\r\n        name = get_var_name(b)\r\n        s = \"\\n\" + \" \" * (len(name) + 4)\r\n        mat = s.join(\" \".join(map(str, v)) for v in b)\r\n        print(\" {} = {}\".format(name, mat))\r\n    else:\r\n        if isinstance(a[0], list or tuple):\r\n            a = a[0]\r\n            print(\" {} = {}\".format(get_var_name(a), a))\r\n        else:\r\n            for val in iter(a):\r\n                print(\" {} = {}\".format(get_var_name(val), val))\r\n    print(\"-\" * 50)\r\n\r\n",
		"description": "debug"
	},
	"lambda": {
		"prefix": "lambda",
		"body": "lambda x:",
		"description": "lambda"
	},
	"Graph": {
		"prefix": "graph",
		"body": "import sys\r\nsys.setrecursionlimit(1000000000)\r\ninput = sys.stdin.readline\r\nfrom array import array\r\n\r\nn, m = map(int, input().split())\r\nes = [array(\"i\") for _ in range(n)]\r\nfor i in range(m):\r\n    start, end = map(int, input().split())\r\n    start -= 1; end -= 1\r\n    es[start].append(end)\r\n    es[end].append(start)\r\n",
		"description": "グラフ"
	},
	"Graph2": {
		"prefix": "graph2",
		"body": "import sys\r\nsys.setrecursionlimit(1000000000)\r\ninput = sys.stdin.readline\r\n\r\nn, m = map(int, input().split())\r\nes = [[] for _ in range(n)]\r\nfor i in range(m):\r\n    start, end, weight = map(int, input().split())\r\n    start -= 1; end -= 1\r\n    es[start].append((end, weight))\r\n    es[end].append((start, weight))\r\n",
		"description": "グラフ"
	},
	"array": {
		"prefix": "array ",
		"body": "from array import array",
		"description": "array"
	},
	"continue": {
		"prefix": "continue",
		"body": "continue",
		"description": "continue"
	},
	"clamp": {
		"prefix": "clamp",
		"body": "def clamp(v: int, low: int = None, high: int = None) -> int:\r\n    \"\"\"vの値を範囲[low, high]に収める.\"\"\"\r\n    if low != None:\r\n        v = max(v, low)\r\n    if high != None:\r\n        v = min(v, high)\r\n    return v\r\n\r\n",
		"description": "vの値を範囲[low, high]に収める."
	},
	"sep": {
		"prefix": "sep",
		"body": "sep=\"\\n\"",
		"description": "sep"
	},
	"mod100000007": {
		"prefix": "mod1000000007",
		"body": "1_000_000_007",
		"description": "mod"
	},
	"tuplemai": {
		"prefix": "tuplemai",
		"body": "tuple(map(int, input().split()))",
		"description": "tuple入力"
	},
	"mod998244353": {
		"prefix": "mod998244353",
		"body": "998_244_353",
		"description": "mod998244353"
	},
	"UnionFind": {
		"prefix": "UnionFind",
		"body": "class UnionFind:\r\n    __slots__ = [\"N\", \"root\"]\r\n\r\n    def __init__(self, N: int) -> None:\r\n        \"\"\"\r\n        N:要素数\r\n        root:各要素の親要素の番号を格納するリスト.\r\n             ただし, root[x] < 0 ならその頂点が根で-root[x]が木の要素数.\r\n        \"\"\"\r\n        self.N = N\r\n        self.root = [-1] * N\r\n\r\n    def __repr__(self):\r\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\r\n\r\n    def find(self, x: int) -> int:\r\n        \"\"\"頂点xの根を見つける\"\"\"\r\n        r = x\r\n        while self.root[r] >= 0:\r\n            r = self.root[r]\r\n\r\n        while self.root[x] >= 0:\r\n            self.root[x], x = r, self.root[x]\r\n\r\n        return r\r\n\r\n    def union(self, x: int, y: int) -> bool:\r\n        \"\"\"x, yが属する木をunion. same(x, y), つまりunionしたかを返す\"\"\"\r\n        x = self.find(x)\r\n        y = self.find(y)\r\n        if x == y:\r\n            return False\r\n\r\n        elif self.root[y] < self.root[x]:\r\n            x, y = y, x\r\n        self.root[x] += self.root[y]\r\n        self.root[y] = x\r\n\r\n        return True\r\n\r\n    def same(self, x: int, y: int) -> bool:\r\n        \"\"\"xとyが同じグループに属するかどうか\"\"\"\r\n        return self.find(x) == self.find(y)\r\n\r\n    def count(self, x: int) -> int:\r\n        \"\"\"頂点xが属する木のサイズを返す\"\"\"\r\n        return - self.root[self.find(x)]\r\n\r\n    def members(self, x: int) -> list:\r\n        \"\"\"xが属する木の要素を列挙\"\"\"\r\n        _root = self.find(x)\r\n        return [i for i in range(self.N) if self.find(i) == _root]\r\n\r\n    def roots(self) -> list:\r\n        \"\"\"森の根を列挙\"\"\"\r\n        return [i for i, x in enumerate(self.root) if x < 0]\r\n\r\n    def group_count(self) -> int:\r\n        \"\"\"連結成分の数\"\"\"\r\n        res = 0\r\n        for i in self.root:\r\n            if i < 0:\r\n                res += 1\r\n        return res\r\n\r\n    def all_group_members(self) -> dict:\r\n        \"\"\"{ルート要素: [そのグループに含まれる要素のリスト], ...}の辞書を返す\"\"\"\r\n        groups = {r: [] for r in self.roots()}\r\n        for i in range(self.N):\r\n            groups[self.find(i)].append(i)\r\n        return groups\r\n\r\n",
		"description": "UnionFind"
	},
	"セグメント木": {
		"prefix": "Segment",
		"body": "class SegmentTree:\r\n    def __init__(self, init: int or list, op, e):\r\n        \"\"\"\r\n        init : int か list\r\n        op : min, +, *, xor, gcd など\r\n        e : 単位元(min:inf, 和:0, 積:1, xor:0, gcd:0)\r\n        \"\"\"\r\n        self.op = op\r\n        self.e = e\r\n        if isinstance(init, int):\r\n            self.size = 1 << (init - 1).bit_length()\r\n            self.seg = [e] * (2 * self.size)\r\n            self.n = init\r\n        else:\r\n            self.n = n = len(init)\r\n            self.size = 1 << (n - 1).bit_length()\r\n            self.seg = [e] * (2 * self.size)\r\n            seg = self.seg\r\n            for i, e in enumerate(init):\r\n                seg[i + self.size] = e\r\n            for i in range(self.size - 1, 0, -1):\r\n                seg[i] = op(seg[2 * i], seg[2 * i + 1])\r\n\r\n    def __getitem__(self, k):\r\n        \"\"\" \r\n            seg[k] -> seg の k 番目を返す. O(1)\r\n            seg[l, r] -> op(seg[l], seg[l + 1], ... ,seg[r - 1]) を返す. O(log(n))\r\n        \"\"\"\r\n        if isinstance(k, int):\r\n            return self.seg[k + self.size]\r\n        l, r = k\r\n        return self.prod(l, r)\r\n\r\n    def __setitem__(self, k, x):\r\n        return self.set(k, x)\r\n\r\n    def set(self, k, x):\r\n        \"\"\"k番目の要素の値をxに変更\"\"\"\r\n        k += self.size\r\n        seg = self.seg\r\n        seg[k] = x\r\n        while k > 1:\r\n            k >>= 1\r\n            seg[k] = self.op(seg[2 * k], seg[2 * k + 1])\r\n\r\n    def prod(self, l, r):\r\n        \"\"\"op(a[l], ..., a[r - 1])\"\"\"\r\n        l += self.size; r += self.size\r\n        sl = self.e\r\n        sr = self.e\r\n        while l < r:\r\n            if r & 1:\r\n                r -= 1\r\n                sr = self.op(self.seg[r], sr)\r\n            if l & 1:\r\n                sl = self.op(sl, self.seg[l])\r\n                l += 1\r\n            l >>= 1\r\n            r >>= 1\r\n        return self.op(sl, sr)\r\n\r\n    def all_prod(self):\r\n        return self.seg[1]\r\n\r\n    def update(self, k, x):\r\n        \"\"\"k番目の要素の値をop(seg[k], x)に更新\"\"\"\r\n        self.set(k, self.op(self[k], x))\r\n\r\n    def debug(self):\r\n        n = len(self.seg).bit_length()\r\n        res = []\r\n        k = 1\r\n        for _ in range(1, n + 1):\r\n            res.append(\" \".join(map(str, self.seg[k:2 * k])))\r\n            k *= 2\r\n        k //= 2\r\n        print(\"-\" * k)\r\n        print(\"\\n\".join(res))\r\n        print(\"-\" * k)\r\n\r\n    def __iter__(self):\r\n        for i in range(self.n):\r\n            yield self[i]\r\n\r\n    def __repr__(self):\r\n        return \" \".join(map(str, self))\r\n",
		"description": "セグメント木"
	},
	"Binary Indexed Tree": {
		"prefix": "BiraryIndexedTree",
		"body": "class BinaryIndexedTree:\r\n    def __init__(self, init: int or list):\r\n        if isinstance(init, int):\r\n            self.n = init\r\n            self.tree = [0] * (init + 1)\r\n            self.depth = init.bit_length() - 1\r\n        else:\r\n            self.n = len(init)\r\n            self.tree = [0] * (self.n + 1)\r\n            self.depth = self.n.bit_length() - 1\r\n            for i, e in enumerate(init):\r\n                self.tree[i] += e\r\n                j = i | (i + 1)\r\n                if j < self.n:\r\n                    self.tree[j] += self.tree[i]\r\n\r\n    def sum(self, i: int) -> int:\r\n        \"\"\" 区間[0,i) の総和を求める \"\"\"\r\n        s = 0\r\n        i -= 1\r\n        while i >= 0:\r\n            s += self.tree[i]\r\n            i = (i & (i + 1)) - 1\r\n        return s\r\n\r\n    def add(self, i: int, x: int) -> None:\r\n        \"\"\" i 番目の要素に x を足す \"\"\"\r\n        while i < self.n:\r\n            self.tree[i] += x\r\n            i |= i + 1\r\n\r\n    def get(self, i: int, j: int) -> int:\r\n        \"\"\" 部分区間和 [i, j) \"\"\"\r\n        if i == 0:\r\n            return self.sum(j)\r\n        return self.sum(j) - self.sum(i)\r\n\r\n    def lower_bound(self, x: int, equal: bool = False) -> tuple:\r\n        \"\"\" (a0+a1+...+ai < x となる最大の i, その時の a0+a1+...+ai )\r\n             a0+a1+...+ai <= x としたい場合は equal = True\r\n             二分探索であるため、ai>=0 を満たす必要がある\"\"\"\r\n        sum_ = 0\r\n        pos = -1    # 1-indexed の時は pos = 0\r\n        if not equal:\r\n            for i in range(self.depth, -1, -1):\r\n                k = pos + (1 << i)\r\n                if k < self.n and sum_ + self.tree[k] < x:  # 1-indexed の時は k <= self.n\r\n                    sum_ += self.tree[k]\r\n                    pos += 1 << i\r\n        if equal:\r\n            for i in range(self.depth, -1, -1):\r\n                k = pos + (1 << i)\r\n                if k < self.n and sum_ + self.tree[k] <= x:  # 1-indexed の時は k <= self.n\r\n                    sum_ += self.tree[k]\r\n                    pos += 1 << i\r\n        return pos, sum_\r\n\r\n    def __getitem__(self, i: int) -> int:\r\n        return self.get(i, i + 1)\r\n\r\n    def __setitem__(self, k: int, x: int) -> None:\r\n        self.add(k, x - self[k])\r\n\r\n    def __iter__(self):\r\n        \"\"\" [a0, a1, a2, ...] \"\"\"\r\n        for i in range(self.n):\r\n            yield self.get(i, i + 1)\r\n\r\n    def __str__(self):\r\n        text1 = \" \".join([\"element:            \"] + list(map(str, self)))\r\n        text2 = \" \".join([\"cumsum(1-indexed):  \"] + list(str(self.sum(i)) for i in range(1, self.n + 1)))\r\n        return \"\\n\".join((text1, text2))\r\n\r\n",
		"description": "BIT"
	}
}