{
	"main function": {
		"prefix": "ma",
		"body": "#include <bits/stdc++.h>\nusing namespace std;\n#pragma GCC target(\"avx2\")\n#pragma GCC optimize(\"O3\")\n#pragma GCC optimize(\"unroll-loops\")\n#define all(x) (x).begin(), (x).end()\n#define reall(a) (a).rbegin(), (a).rend()\n#define sort(x) sort((x).begin(), (x).end())\n#define reverse(x) reverse((x).begin(), (x).end())\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define REP(i, m, n) for (int i = m; i < n; i++)\n#define INF INT_MAX\n#define fcout cout << fixed << setprecision(15) // 15桁まで表示\n#define en '\\n'\nusing str = string;\nusing ll = long long;\nusing ull = unsigned long long;\nusing ui = unsigned int;\nusing puu = pair<ui, ui>;\nusing P = pair<int, int>;\nusing vi = vector<int>;\nusing vll = vector<long long>;\nint floor(int a, int b) {\n  return (a + b - 1) / b;\n};\nint month[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\ntemplate <class A, class B>\nostream &operator<<(ostream &ost, const pair<A, B> &p) {\n  ost << \"{\" << p.first << \", \" << p.second << \"}\";\n  return ost;\n}\ntemplate <class T> ostream &operator<<(ostream &ost, const vector<T> &v) {\n  ost << \"[\";\n  for (int i = 0; i < v.size(); i++) {\n    if (i)\n      ost << \", \";\n    ost << v[i];\n  }\n  ost << \"]\";\n  return ost;\n}\ntemplate <class A, class B>\nostream &operator<<(ostream &ost, const map<A, B> &v) {\n  ost << \"{\";\n  for (auto p : v) {\n    ost << \"(\" << p.first << \", \" << p.second << \")\";\n  }\n  ost << \"}\";\n  return ost;\n}\ntemplate <class T> inline bool chmax(T &a, T b) {\n  if (a < b) {\n    a = b;\n    return true;\n  }\n  return false;\n};\ntemplate <class T> inline bool chmin(T &a, T b) {\n  if (a > b) {\n    a = b;\n    return true;\n  }\n  return false;\n};\ntemplate <class T> inline void print(const T &a) {\n  cout << a << \"\\n\";\n}\ntemplate <class T, class... Ts> inline void print(const T &a, const Ts &...ts) {\n  cout << a << \" \";\n  print(ts...);\n}\nconst ll mod = 1000000007;\nconst double PI = acos(-1.0);\n\nint main() {\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  cout << setprecision(20) << setiosflags(ios::fixed);\n  \n}",
		"description": "main"
	},
	"~": {
		"prefix": "~",
		"body": [
			"~${1:typename}() {",
			"\t$0",
			"}"
		],
		"description": "デストラクターに対するコード スニペット"
	},
	"class": {
		"prefix": "class",
		"body": [
			"class ${1:name} {",
			"\tpublic:",
			"\t\t${1:name}();",
			"\t\t~${1:name}();",
			"",
			"\tprivate:",
			"\t\t${0:}",
			"};",
			"",
			"${1:name}::${1:name}() {",
			"}",
			"",
			"${1:name}::~${1:name}() {",
			"}"
		],
		"description": "クラスに対するコード スニペット"
	},
	"classi": {
		"prefix": "classi",
		"body": [
			"class ${1:name} {",
			"\tpublic:",
			"\t\t${1:name}() {",
			"\t\t}",
			"\t\t~${1:name}() {",
			"\t\t}",
			"",
			"\tprivate:",
			"\t\t${0:}",
			"};"
		],
		"description": "インライン コンストラクター/デストラクターを含むクラスに対するコード スニペット"
	},
	"ctor": {
		"prefix": "ctor",
		"body": [
			"${1:typename}() {",
			"\t${0:}",
			"};"
		],
		"description": "コンストラクターに対するコード スニペット"
	},
	"do": {
		"prefix": "do",
		"body": [
			"do {",
			"\t${0:}",
			"} while(${1:expression});"
		],
		"description": "do...while ループに対するコード スニペット"
	},
	"enum": {
		"prefix": "enum",
		"body": [
			"enum ${1:name} {",
			"\t${0:}",
			"}"
		],
		"description": "列挙型に対するコード スニペット"
	},
	"enumclass": {
		"prefix": "enumclass",
		"body": [
			"enum class${1:name} {",
			"\t${0:}",
			"}"
		],
		"description": "列挙型クラスのコード スニペット"
	},
	"for": {
		"prefix": "for",
		"body": [
			"for (${1:type} ${2:index} = 0; ${2:index} < ${3:length}; ${2:index}++) {",
			"\t${0:}",
			"}"
		],
		"description": "for ループに対するコード スニペット"
	},
	"foreach": {
		"prefix": "foreach",
		"body": [
			"for  each (${1:type} ${2:indentifier} in ${3:collection}) {",
			"\t${0:}",
			"}"
		],
		"description": "foreach ステートメントに対するコード スニペット"
	},
	"forr": {
		"prefix": "forr",
		"body": [
			"for (${1:type} ${2:index} = 0; ${2:index} > ${3:length}; ${2:index}--) {",
			"\t${0:}",
			"}"
		],
		"description": "逆向き for ループに対するコード スニペット"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if(${1:true}) {",
			"\t${0:}",
			"}"
		],
		"description": "if ステートメントに対するコード スニペット"
	},
	"ifelse": {
		"prefix": "ifelse",
		"body": [
			"if(${1:true}) {",
			"\t${0:}",
			"} else {",
			"}"
		],
		"description": "if else ステートメントに対するコード スニペット"
	},
	"namespace": {
		"prefix": "namespace",
		"body": [
			"namespace ${1:name}) {",
			"\t${0:}",
			"}"
		],
		"description": "名前空間に対するコード スニペット"
	},
	"pif": {
		"prefix": "pif",
		"body": [
			"#if ${1:expression}",
			"\t${0:}",
			"#endif //${1:expression}"
		],
		"description": "#if に対するコード スニペット"
	},
	"pifdef": {
		"prefix": "pifdef",
		"body": [
			"#ifdef ${1:expression}",
			"\t${0:}",
			"#endif //${1:expression}"
		],
		"description": "#ifdef に対するコード スニペット"
	},
	"pifndef": {
		"prefix": "pifndef",
		"body": [
			"#ifndef ${1:expression}",
			"\t${0:}",
			"#endif //${1:expression}"
		],
		"description": "#ifndef に対するコード スニペット"
	},
	"rfor": {
		"prefix": "rfor",
		"body": [
			"for (auto& ${1:variable} : ${2:range}) {",
			"\t${0:}",
			"}"
		],
		"description": "'範囲ベースの for' ループに対するコード スニペット"
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch (${1:expression}) {",
			"\tdefault:",
			"\tbreak;${0:}",
			"}"
		],
		"description": "switch ステートメントに対するコード スニペット"
	},
	"try": {
		"prefix": "try",
		"body": [
			"try {",
			"\t${1:}",
			"}",
			"catch (const std::exception&) {",
			"\t${0:}",
			"}"
		],
		"description": "try catch に対するコード スニペット"
	},
	"union": {
		"prefix": "union",
		"body": [
			"union ${1:name} {",
			"\t${0:}",
			"}"
		],
		"description": "共用体に対するコード スニペット"
	},
	"while": {
		"prefix": "while",
		"body": [
			"while (${1:expression}) {",
			"\t${0:}",
			"}"
		],
		"description": "while ループに対するコード スニペット"
	},
	"Sort": {
		"prefix": "so",
		"body": [
			"Sort (${1:index});"
		],
		"description": "Sort ループに対するコード スニペット"
	},
	"Rsort": {
		"prefix": "rs",
		"body": [
			"Sort (${1:index});",
			"Reverse (${1:index});"
		],
		"description": "RSort ループに対するコード スニペット"
	},
	"cin": {
		"prefix": "cin",
		"body": [
			"cin >> ${1:index};"
		],
		"description": "cinに対するコード スニペット"
	},
	"cout": {
		"prefix": "cout",
		"body": [
			"cout << ${1:index} << endl;"
		],
		"description": "coutに対するコード スニペット"
	},
	"input": {
		"prefix": "input()",
		"body": "input()",
		"description": "input"
	}
}