"""
【個数制限なしナップサック問題】
重さと価値がそれぞれw_i,v_iであるようなn種類の品物があります。
これらの品物の中から,重さの総和がWを超えないように選んだ時の,価値の総和の最大を
求めよ.　ただし, 同じ種類の品物をいくつ選んでもいいとする.
!!制約!!
・1<=n<=100
・1<=w_i, v_i<=100
・1<=W<=10000
"""
#-------------------------------------------------------------------------------

#入力

n=int(input())
w=[0]*n
v=[0]*n
for i in range(n):
    w[i],v[i]=map(int,input().split())
W=int(input())
dp=[[0 for i in range(W+1)] for j in range(n+1)] #dp[0][j]=0

#メイン
# dp[i+1][j]=(i番目までの品物から重さの総和がj以下となるように選んだ時の価値の総和の最大値)
for i in range(n):
    for j in range(W+1):
        if j<w[i]:
            dp[i+1][j]=dp[i][j]
        else:
            dp[i+1][j]=max(dp[i][j],dp[i+1][j-w[i]]+v[i])

print(dp[n][W])

"""
max{dp[i][j-k*w[i]]+k*v[i]|0<=k}
に関して考えると,
dp[i+1][j]の計算においてi番目の品物をk個(k>=1)選ぶ場合というのは,
dp[i+1][j-w[i]]の計算(つまり重さ制限がi番目の品物1個の重さ分小さい場合)において
i番目の品物をk-1個選んだ場合と同様の計算過程をたどることになる.
よって
max(dp[i][j],dp[i+1][j-w[i]]+v[i])
を計算すればok
kのループがないので計算量はO(nW)
"""